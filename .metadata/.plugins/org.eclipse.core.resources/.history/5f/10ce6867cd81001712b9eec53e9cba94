import static org.junit.Assert.*;

import org.junit.Test;

public class DHCPConfigTest {

	@Test
	public void LineIsCommentedTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line is not commented",myDHCPConfig.LineIsCommented("#Config"));
	}
	@Test
	public void LineIsNotCommentedTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line is not commented, test sees it commented",myDHCPConfig.LineIsCommented("Not Commented line"));
	}
	@Test
	public void LineIsHasCommentHalfwayTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line is not commented halfway, we don't allow that.  ",myDHCPConfig.LineIsCommented("Not Commented line # Commented Part"));
	}
	@Test
	public void LineStartsWithHostTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line starts with host",myDHCPConfig.LineStartsWithHost("host config"));
	}
	@Test
	public void LineContainsNoHostTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does not contain host",myDHCPConfig.LineStartsWithHost("A config file with the word we are looking for "));
	}
	@Test
	public void LineIsHasHostHalfwayTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Test allows host word halfway, we don't allow that.  ",myDHCPConfig.LineIsCommented("Line has host word halfway, we don't allow that."));
	}
	@Test
	public void LineEndsWithSemiColon() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line end with SemiColon, function does not see it",myDHCPConfig.LineEndsWithSemiColon("Line end with ;"));
	}
	@Test
	public void LineDoesNotEndWithSemiColon() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Function things line end with SemiColon, it does not",myDHCPConfig.LineEndsWithSemiColon("Line does not end with ; We have extra info behind"));
	}
	@Test
	public void LineOnlyContainsOpenParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line does start with parenthese",myDHCPConfig.LineContainsOnlyOpenParenthese("{"));
	}
	@Test
	public void LineContainsTextBeforeOpenParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("something else{"));
	}
	@Test
	public void LineContainsTextAfterOpenParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("{more text "));
	}
	@Test
	public void LineOnlyContainsCloseParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("}"));
	}
	@Test
	public void LineContainsTextBeforeCloseParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("something else}"));
	}
	@Test
	public void LineContainsTextAfterCloseParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("} more text "));
	}
	@Test
	public void LineIsEmptyTest(){
	DHCPConfig myDHCPConfig = new DHCPConfig();
	
	assertTrue("Line contains only spaces",myDHCPConfig.LineIsEmpty("            "));

	}
	@Test
	public void LineIsNotEmptyTest(){
	DHCPConfig myDHCPConfig = new DHCPConfig();
	
	assertFalse("Line contains letter A instead of spaces",myDHCPConfig.LineIsEmpty("    A        "));

	}
}
