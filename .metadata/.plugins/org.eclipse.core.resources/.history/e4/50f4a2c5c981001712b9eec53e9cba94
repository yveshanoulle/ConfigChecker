import static org.junit.Assert.*;

import org.junit.Test;

public class DHCPConfigTest {

	@Test
	public void DHCPConfigLineIsCommentedTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line is not commented",myDHCPConfig.LineIsCommented("#Config"));
	}
	
	@Test
	public void DHCPConfigLineIsNotCommentedTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line is not commented, test sees it commented",myDHCPConfig.LineIsCommented("Not Commented line"));
	}
	
	@Test
	public void DHCPConfigLineIsHasCommentHalfwayTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line is not commented halfway, we don't allow that.  ",myDHCPConfig.LineIsCommented("Not Commented line # Commented Part"));
	}
	
	@Test
	public void DHCPConfigLineStartsWithHostTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line starts with host",myDHCPConfig.LineStartsWithHost("host config"));
	}
	@Test
	public void DHCPConfigLineContainsNoHostTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does not contain host",myDHCPConfig.LineStartsWithHost("A config file with the word we are looking for "));
	}
	@Test
	public void DHCPConfigLineIsHasHostHalfwayTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Test allows host word halfway, we don't allow that.  ",myDHCPConfig.LineIsCommented("Line has host word halfway, we don't allow that."));
	}
	
	@Test
	public void DHCPConfigLineEndsWithSemiColon() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line end with SemiColon, function does not see it",myDHCPConfig.LineEndsWithSemiColon("Line end with ;"));
	}
	@Test
	public void DHCPConfigLineDoesNotEndWithSemiColon() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Function things line end with SemiColon, it does not",myDHCPConfig.LineEndsWithSemiColon("Line does not end with ; We have extra info behind"));
	}
	@Test
	public void DHCPConfigLineOnlyContainsOpenParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line does start with parenthese",myDHCPConfig.LineContainsOnlyOpenParenthese("{"));
	}
	@Test
	public void DHCPConfigLineContainsTextBeforeOpenParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("something else{"));
	}
	
	@Test
	public void DHCPConfigLineContainsTextAfterOpenParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("{more text "));
	}
	
	@Test
	public void DHCPConfigLineOnlyContainsCloseParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertTrue("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("}"));
	}
	@Test
	public void DHCPConfigLineContainsTextBeforeCloseParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("something else}"));
	}
	@Test
	public void DHCPConfigLineContainsTextAfterCloseParentheseTest() {
		
		DHCPConfig myDHCPConfig = new DHCPConfig();
		
		assertFalse("Line does start with parenthese",myDHCPConfig.LineContainsOnlyCloseParenthese("} more text "));
	}
	
	
}
